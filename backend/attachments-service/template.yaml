AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Stack for todo-houessou-com attachement service"

Globals:
  Function:
    Runtime: python3.8

Resources:
  FilesApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: dev
      Auth:
        Authorizers:
          TodoAuthorizer:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: 
                !Join
                  - ''
                  - - 'https://cognito-idp.'
                    - '${AWS::Region}'
                    - '.amazonaws.com/'
                    - !ImportValue todo-houessou-com-TodoUserPool
              audience: 
                - !ImportValue todo-houessou-com-TodoUserPoolClient
        DefaultAuthorizer: TodoAuthorizer
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
        AllowOrigins:
          - https://todo.houessou.com
        AllowHeaders:
          - '*'
  
  getTodoFiles:
    Type: AWS::Serverless::Function
    Properties:
      Environment: 
        Variables:
          TODOFILES_TABLE: !Ref TodoFilesTable 
      CodeUri: ./functions
      Handler: getTodoFiles.lambda_handler
      Events:
        getFilesApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref FilesApi
            Path: /{todoID}/files
            Method: GET
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 
                - dynamodb:*'
                - 's3:GetObject'
                - 's3:ListBucket'
              Resource:
                - !GetAtt 'TodoFilesTable.Arn'
                - !GetAtt 'TodoFilesBucket.Arn'
                - !Join ['', [!GetAtt 'TodoFilesBucket.Arn', '/*']]
        
  addTodoFiles:
    Type: AWS::Serverless::Function
    Properties:
      Environment: 
        Variables:
          TODOFILES_TABLE: !Ref TodoFilesTable 
          TODOFILES_BUCKET: !Ref TodoFilesBucket
      CodeUri: ./functions
      Handler: addTodoFiles.lambda_handler
      Events:
        addTodoApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref FilesApi
            Path: /{todoID}/files/upload
            Method: POST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 
                - 'dynamodb:*'
                - 's3:PutObject'
                - 's3:ListBucket'
              Resource:
                - !GetAtt 'TodoFilesTable.Arn'
                - !GetAtt 'TodoFilesBucket.Arn'
                - !Join ['', [!GetAtt 'TodoFilesBucket.Arn', '/*']]

  # dynamoDB table to store todos files url
  TodoFilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'TodoFilesTable-${AWS::StackName}'
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions: 
        - AttributeName: "fileID"
          AttributeType: "S"
        - AttributeName: "todoID"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "fileID"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "todoIDIndex"
          KeySchema:
            - AttributeName: "todoID"
              KeyType: "HASH"
            - AttributeName: "fileID"
              KeyType: "RANGE"
          Projection: 
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  # S3 bucket to store todos files
  TodoFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'hpf-todo-app-files' 
  
  TodoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub 'IdentityPool-${AWS::StackName}'
      CognitoIdentityProviders:
        - ClientId: !ImportValue todo-houessou-com-TodoUserPoolClient
          ProviderName: !ImportValue todo-houessou-com-TodoUserPool
          ServerSideTokenCheck: true

  TodoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties: 
      IdentityPoolId: !Ref TodoIdentityPool
      Roles:
        "authenticated": !GetAtt TodoIdentityPoolRole.Arn
  
  TodoIdentityPoolRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'identity-pool-role-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              - StringEquals:
                  cognito-identity.amazonaws.com:aud: !Ref TodoIdentityPool
              - ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: "authenticated"

Outputs:
  FilesApi:
    Value: !Join [ '', ['https://', !Ref FilesApi, '.execute-api.us-east-1.amazonaws.com/dev'] ]
    Export:
      Name: !Sub "${AWS::StackName}-FilesApiURL"
  TodoFilesTable:
    Value: !Ref TodoFilesTable 
    Export:
      Name: !Sub "${AWS::StackName}-TodoFilesTable"
  TodoFilesTableArn:
    Value: !GetAtt 'TodoFilesTable.Arn' 
    Export:
      Name: !Sub "${AWS::StackName}-TodoFilesTableArn"
  TodoFilesBucket:
    Value: !Ref 'TodoFilesBucket' 
    Export:
      Name: !Sub "${AWS::StackName}-TodoFilesBucket"
  TodoFilesBucketArn:
    Value: !GetAtt 'TodoFilesBucket.Arn' 
    Export:
      Name: !Sub "${AWS::StackName}-TodoFilesBucketArn"
  TodoIdentityPoolId:
    Value: !Ref 'TodoIdentityPool'
    Export:
      Name: !Sub "${AWS::StackName}-TodoIdentityPoolId"
  StackName: 
    Value: !Sub "${AWS::StackName}"